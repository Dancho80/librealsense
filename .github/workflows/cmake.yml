name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LRS_BUILD_CONFIG: Debug
  LRS_RUN_CONFIG: Release

jobs:

  Linux_testing_cpp:
      runs-on: ubuntu-18.04      
      env: 
        RS_CPP_TEST: true
      steps:
      - uses: actions/checkout@v2
      
      - name: Build
        run: | 
          cmake .. -DBUILD_UNIT_TESTS=false -DBUILD_LEGACY_LIVE_TEST=true -DBUILD_EXAMPLES=false -DBUILD_TOOLS=false -DBUILD_WITH_TM2=false -DCHECK_FOR_UPDATES=true
          cmake --build . --config ${{env.LRS_RUN_CONFIG}} -- -j4
          ./unit-tests/live-test -d yes -i [software-device]
          for i in ./records/single_cam/*; do ./unit-tests/live-test -d yes -i ~[multicam] from "$i"; done
          for i in ./records/multi_cam/*; do ./unit-tests/live-test -d yes -i [multicam] from "$i"; done
  
  
  
  Windows_CSharp:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2016   
      
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
       python-version: '3.8.1'
         
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |        
        cmake . -G "Visual Studio 15 2017 Win64" -DBUILD_EXAMPLES=false -DBUILD_TOOLS=false -DBUILD_CSHARP_BINDINGS=true -DDOTNET_VERSION_LIBRARY="4.5" -DDOTNET_VERSION_EXAMPLES="4.5" -DCHECK_FOR_UPDATES=true
     

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build . --config ${{env.LRS_BUILD_CONFIG}} -- -m     

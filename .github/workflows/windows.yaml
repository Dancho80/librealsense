name: WindowsCI

on:
  push:
   branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LRS_BUILD_CONFIG: Debug
  LRS_RUN_CONFIG: Release

jobs:
    
  Windows_testing_cpp_USB_Win7:
    runs-on: windows-2016
    env:
      VS15: false
      RS_CPP_TEST: true
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
       python-version: '3.8.1'

    - name: Enable Long Paths
      shell: powershell
      run: |
       New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
    
    - name: PreBuild
      run: |
       cd scripts && ./api_check.sh && cd ..
       mkdir build && cd build
    
    - name: Configure CMake
    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |        
        cmake .. -G "Visual Studio 15 2017 Win64" -DPYTHON_EXECUTABLE="C:/Python38/python.exe" -DBUILD_PYTHON_BINDINGS=true -DPYBIND11_PYTHON_VERSION=3.8 -DBUILD_UNIT_TESTS=false -DBUILD_LEGACY_LIVE_TEST=true -DBUILD_EXAMPLES=false -DBUILD_TOOLS=false -DBUILD_WITH_TM2=false -DFORCE_RSUSB_BACKEND=true

    - name: Build
      # Build your program with the given configuration
      run: |
        pwd
        ls
        cmake --build . --config ${{env.LRS_RUN_CONFIG}} -- -m    
     
    - name: Test
      run: |
       cd $LRS_RUN_CONFIG
       ls
       ./live-test.exe -d yes -i [software-device]  
  
  
  
  Windows_cpp:
    runs-on: windows-2016
    env:
      VS15: true
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
       python-version: '3.8.1'

    - name: Enable Long Paths
      shell: powershell
      run: |
       New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

    - name: PreBuild
      run: |
       cd scripts && ./api_check.sh && cd ..
       mkdir build && cd build

    - name: Configure CMake
    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |        
        cmake .. -G "Visual Studio 15 2017 Win64" -DBUILD_EXAMPLES=true -DBUILD_WITH_TM2=true -DCHECK_FOR_UPDATES=true

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build . --config ${{env.LRS_BUILD_CONFIG}} -- -m    
       
  Windows_CSharp:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2016   
    env:
      VS15: true  
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
       python-version: '3.8.1'         

    - name: Enable Long Paths
      shell: powershell
      run: |
       New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

    - name: PreBuild
      run: |
       cd scripts && ./api_check.sh && cd ..
       mkdir build && cd build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |        
        cmake .. -G "Visual Studio 15 2017 Win64" -DBUILD_EXAMPLES=false -DBUILD_TOOLS=false -DBUILD_CSHARP_BINDINGS=true -DDOTNET_VERSION_LIBRARY="4.5" -DDOTNET_VERSION_EXAMPLES="4.5" -DCHECK_FOR_UPDATES=true    

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build . --config ${{env.LRS_BUILD_CONFIG}} -- -m     
